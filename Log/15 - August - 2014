--------Start Entry--------------
Date: 20 - June - 2014
***Title: Loading Xilinx project

***Log Content: 
Encountered problem when deleting the folder, and replace it with the exact same folder, yet cannot load the project up.
--> Solution is to delete the .metadata folder in the workspace (say in an empty folder), then launch as usual and select file --> import --> General --> existing project into workspace --> select the folder with the original project
--> After that copy any changes made (in src code) to the new folder

Encountered problem with programming FPGA failed --> turn off everything. Restart the computer.


--------End Entry--------------




--------Start Entry--------------
Date: 20 - June - 2014
***Title: Ahmed note

***Log Content: 
Reference --> www.warpproject.com --> warpv3
SDK --> Xilinx SDK
Use Ethernet A on the WARP (the outer one)
To program --> Xilinx Tools --> Program FPGA --> Program
Connect UART  --> terra / putty
	--> (For terra only) Change setting by going into setup --> serial port
	--> Baud 115200
	--> 8 bit, none parity, 1 stop bit, now flow control
print --> xil_printf
packet destination is now "a0:a1:a2:a3:a4:a5"

mac_high functions
	receive from ethernet and send to wifi callback --> eth_pkt_transmit
		see wlan_poll_eth
	send from wifi to ethernet callback --> mac_high eth_pkt_send (doesn't work though)
		see wlan_mac_high_process_ipc_msg

anti-virus has to be off when compile
clean may help if not compile


--------End Entry--------------




--------Start Entry--------------
Date: 23 - June - 2014
***Title: Compiling the reference design

***Log Content: 
Each reference design has its own compatible xilinx SDK version. Current Xilinx SDK 14.4 Build SDK_P.49d works with release 0.71. Xilinx SDK would not be able to compile v0.9 reference design.
The UART doesn't work. Tried with Putty & tera term @ 115200 8bit none parity, 1 stop bit & No flow control


--------End Entry--------------




--------Start Entry--------------
Date: 26 - June - 2014
***Title: Fixed UART no output when program FPGA

***Log Content: 
Fixed UART no output when program FPGA:
- The issue was that the system.bit file used contained no software information. Therefore programming FPGA with system.bit will not boot up any software.
- Solution is to compile project and then program FPGA with system.bit file as below:
Do not leave the "ELF file to Initialize in Block RAM" as bootloop. The board will not be booted.
	--> When program FPGA to set the "ELF file to Initialize in Block RAM" in Software Configuration to the appropriate .elf files (which are automatically generated by the SDK if project compiles successfully).
	--> wlan_mac_high_ap.elf and wlan_mac_low_dcf.elf


--------End Entry--------------




--------Start Entry--------------
Date: 26 - June - 2014
***Title: Able to receive packets from wifi

***Log Content: 
By changing the hostapd mac address to be the same as the WARP ethernet A mac address (40:d8:55:40:22:84), the board was able to receive packets directed to the hostapd from stations (tested with phone).
Implemented forwarding packet from WARP to PC via ethernet with WARP header (default 0 1 1 2).
Problem encountered: there was no reply from host apd (probe request from phone is incorrect?)


--------End Entry--------------




--------Start Entry--------------
Date: 27 - June - 2014
***Title: MAC filtering in MAC low

***Log Content: 
Look up the following line for MAC filtering in MAC low
	unicast_to_me = wlan_addr_eq(rx_header->address_1, hw_info.hw_addr_wlan);


--------End Entry--------------




--------Start Entry--------------
Date: 27 - June - 2014
***Title: RadioTap header

***Log Content: 
Excluding the WARP header, WARP will send the Dot11 frame without the RadioTap. The scapy program has to insert an appropriate RadioTap and then forward to the hostapd. Still researching on the "appropriate" radio tap to append in front since each management packet seems to have a different radio tap


--------End Entry--------------




--------Start Entry--------------
Date: 30 - June - 2014
***Title: Useful wireshark filters

***Log Content: 
To filter MAC address of wireless packets:
wlan.sa = ff:ff:ff:ff:ff:ff --> source address
wlan.da = ff:ff:ff:ff:ff:ff --> destination address

To filter type:
wlan.fc.type = 0 (mangement for example)
wlan.fc.type_subtype = 8 (beacon for example)


--------End Entry--------------




--------Start Entry--------------
Date: 04 - July - 2014
***Title: Added retry parameter in WARP header

***Log Content: 
Added an extra byte (5th byte) in WARP header to specify the retry that the WARP should attempt in transmitting the ethernet packet received from PC engine.
The retry number currently depends on the type of messages that the PC Engine wants to transmit:
    Broadcast --> 0 times retry
    unicast --> 7 times retry (this includes management frames and data frames)


--------End Entry--------------




--------Start Entry--------------
Date: 08 - July - 2014
***Title: Added WARP protocol

***Log Content: 
Added WARP protocol with the philosophy:
    - Small in size and does not contain too many reserved/ redundant fields
    - Easy to modify (add / remove features) and extend in the future
    - Easy to implement on different platforms and languages

See "Proposed WARP Protocol.docx" for protocol detail


--------End Entry--------------




--------Start Entry--------------
Date: 14 - July - 2014
***Title: Updated mac low MAC management

***Log Content: 
Added mac low MAC management:
    - Static array structure (O(n) for everything)
    - Currently has maximum 8 MAC address that can be managed (excluding the board's MAC address)
    - Interface to the module can be seen in mac_list.h


Tested with messages sent from PC engine to WARP and received reply from mac low


--------End Entry--------------




--------Start Entry--------------
Date: 14 - July - 2014
***Title: WARP board MAC discrepancy

***Log Content: 
WARP has MAC of "40:d8:55:04:22:84". This is slightly different from the MAC written at the bottom of the board ("40:d8:55:40:22:84" --> 04 and 40)


--------End Entry--------------




--------Start Entry--------------
Date: 23 - July - 2014
***Title: Resolved problem with ethernet frame padding

***Log Content: 
Ethernet frame has a minimum payload of 46 bytes. Therefore any management frame forwarded from hostapd to WARP with length less than 46 bytes (including the warp header) would be padded with 0s at the end to fill up 46 bytes.
This causes the station to misinterpret the packet sent out from warp (since warp sent out the air the whole ethernet payload with 0s padding at the end) and most likely drop the packet.

Quick fix is to add 16 bits integer at the end of transmit header in warp layer to notify warp how many bytes the payload actually is. Current structure of WARP transmit element would be [power] [rate] [channel] [flag] [retry] [payload_size 8 MSB] [payload_size 8 LSB]
WARP simply interprets the header and reads the required amount of bytes.


--------End Entry--------------




--------Start Entry--------------
Date: 24 - July - 2014
***Title: Changed PC Engine program to libtins

***Log Content: 
Changed PC Engine program from scapy to libtins: --> See http://libtins.github.io/
	This probably improves processing speed of the PC Engine significantly
	Note that github installation guide only works with x64 system (cannot make x86 ubuntu to compile custom protocol so we cannot use x86 system)
	
	Fully implemented PC Engine program in libtins to work with WARP


--------End Entry--------------




--------Start Entry--------------
Date: 24 - July - 2014
***Title: Problem with TX MPDU flag

***Log Content: 
TX MPDU flag would cause communication between hostapd and station to be delayed and authentication not successful. Haven't resolved yet so currently having flag = 0


--------End Entry--------------




--------Start Entry--------------
Date: 15 - August - 2014
***Title: Big updates

***Log Content: 
- Progress:
+ Resolved flag problem: use different flag for each packet as implemented in the reference design.
+ See WARP protocol for the latest WARP protocol version.
+ WARP can now host multiple bssid and integrate with a simple aurora slice

- Problems:
+ Certain Ethernet frames from eth0 of aurora-agent cannot be forward directly to WARP since Ethernet frame payload has maximum size of 1500.
    --> Solution is to fragment the ethernet frame from the aurora-agent side and reassemble it in WARP
    --> The solution above must also be implemented in the libtins program so that when WARP receive frame of size greater than 1500, it can fragment the frame and forward to hwsim interface
+ WARP cannot be functional for a long period of time (say more than 2 - 3 hours). This may be a problem with us not managing the queue well??? (checking in an element twice creating a circular linked list)



--------End Entry--------------




